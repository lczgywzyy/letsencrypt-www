#!/bin/bash
set -e
set -u
set -o pipefail
exec 3>&-

BASE_DIR=$(dirname $0)
SCRIPT_PATH="$( cd "${BASE_DIR}" && pwd -P )"
CERT_DIR="./cert"

export LETS_ENCRYPT_WWW_LIB_PATH="${SCRIPT_PATH}/lib"
export CERT_DIR="${CERT_DIR}"

source "${LETS_ENCRYPT_WWW_LIB_PATH}/json.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/formatter.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/ssl.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/http.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/utils.sh"

FQDN=

export DNSPod_HOOK="./provider/dnspod.sh"
DNSPod_RECORD_ID=

# Usage: --help (-h)
# Description: Show help text
command_help() {
  printf "Usage: %s [options...] <domain> \n\n" "${0}"
  printf "Default command: --help\n\n"
  echo "Commands:"
  grep -e '^[[:space:]]*# Usage:' -e '^[[:space:]]*# Description:' -e '^command_.*()[[:space:]]*{' "${0}" | while read -r usage; read -r description; read -r command; do
    if [[ ! "${usage}" =~ Usage ]] || [[ ! "${description}" =~ Description ]] || [[ ! "${command}" =~ ^command_ ]]; then
      _exiterr "Error generating help text."
    fi
    printf " %-32s %s\n" "${usage##"# Usage: "}" "${description##"# Description: "}"
  done
}

command_issue_domain() {
  FQDN="${1}"
  local timestamp="$(date +%s)"

  check_msg "Init environment..."
  init_ca_config

  check_msg "Apply Let's Encrypt account..."
  local accountRSA="${CERT_DIR}/account-key-${timestamp}.pem"
  ssl_generate_rsa_2048 "${accountRSA}"
  reg_account "${accountRSA}"

  check_msg "Start new order..."
  new_order "${accountRSA}"

  check_msg "Deploy dns-01 challenge to provider DNSPod..."
  local challengeArgs="$(build_authz "${accountRSA}")"

  deploy_challenge "${challengeArgs}"
  check_challenge_status "${challengeArgs}"
  valid_challenge "${accountRSA}" "${challengeArgs}"
  clean_challenge "${challengeArgs}"

  check_msg "Deploy dns-01 challenge to provider DNSPod..."
  local privateKey="${CERT_DIR}/private-${timestamp}.pem"
  local csr="${CERT_DIR}/${timestamp}.csr"
  local crt="${CERT_DIR}/cert-${timestamp}.pem"

  ssl_generate_rsa_2048 "${privateKey}"
  generate_csr "${privateKey}" "${csr}"
  sign_csr "${accountRSA}" "$(< "${csr}")" 3>"${crt}"

  check_msg "Produce cert..."
  produce_cert "${timestamp}"

  check_msg "Done, www domain "${FQDN}" cert at: "
  echo "================"
  echo "$( cd "${BASE_DIR}/${CERT_DIR}" && pwd -P )"
  echo "================"
}

main() {
  [[ -z "${@}" ]] && eval set -- "--help"

  while (( ${#} )); do
    case "${1}" in
      --help|-h)
        command_help
        exit 0
        ;;

      *)
        command_issue_domain "${1}"
        ;;
    esac

    shift 1
  done
}

main "${@-}"