#!/bin/bash
set -e
set -u
set -o pipefail
exec 3>&-

BASE_DIR=$(dirname $0)
SCRIPT_PATH="$( cd "${BASE_DIR}" && pwd -P )"
CERT_DIR="./cert"

export LETS_ENCRYPT_WWW_LIB_PATH="${SCRIPT_PATH}/lib"
export CERT_DIR="${CERTDIR}"

source "${LETS_ENCRYPT_WWW_LIB_PATH}/json.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/formatter.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/ssl.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/http.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/utils.sh"

FQDN=

export DNSPod_HOOK="./provider/dnspod.sh"
DNSPod_RECORD_ID=

main() {
  exit 0

  check_command

  case "$(get_command)" in
    issue) command_issue;;
    version) command_version;;
    *) command_help; exit 1;;
  esac


  FQDN="${1}"

  local timestamp="$(date +%s)"

  check_msg "Init environment..."
  init_ca_config

  check_msg "Apply Let's Encrypt account..."
  local accountRSA="${CERTDIR}/account-key-${timestamp}.pem"
  ssl_generate_rsa_2048 "${accountRSA}"
  reg_account "${accountRSA}"

  check_msg "Start new order..."
  new_order "${accountRSA}"

  check_msg "Deploy dns-01 challenge to provider DNSPod..."
  local challengeArgs="$(build_authz "${accountRSA}")"

  deploy_challenge "${challengeArgs}"
  check_challenge_status "${challengeArgs}"
  valid_challenge "${accountRSA}" "${challengeArgs}"
  clean_challenge "${challengeArgs}"

  check_msg "Deploy dns-01 challenge to provider DNSPod..."
  local privateKey="${CERTDIR}/private-${timestamp}.pem"
  local csr="${CERTDIR}/${timestamp}.csr"
  local crt="${CERTDIR}/cert-${timestamp}.pem"

  ssl_generate_rsa_2048 "${privateKey}"
  generate_csr "${privateKey}" "${csr}"
  sign_csr "${accountRSA}" "$(< "${csr}")" 3>"${crt}"

  check_msg "Produce cert..."
  produce_cert "${timestamp}"

  check_msg "Done, www domain "${FQDN}" cert at: "
  echo "================"
  echo "$( cd "${BASE_DIR}/${CERTDIR}" && pwd -P )"
  echo "================"

}

main "${@-}"